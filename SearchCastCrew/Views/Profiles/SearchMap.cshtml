@using Microsoft.AspNet.Identity
@using System.Collections;
@model SearchCastCrew.Models.UserIndexVm
@{
    ViewBag.Title = "Home Page";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Scripts {
    @Scripts.Render("~/Scripts/home.js")
    @Scripts.Render("~/Scripts/jquery.interactive_bg.js")
}

<script src="http://maps.googleapis.com/maps/api/js?key=AIzaSyC_n8bsIW6byp97UkwJCcEG7RMbG058uKk&sensor=false"></script>
<link href="~/css/home.css" rel="stylesheet" />
<br /><br /><br />


   


<br /><br /><br />   
<div class="container">
    <div calss="container col-md-12" id="map" style="width:100%;height:380px;">
         
    </div>
    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.FullAddress)
            </th>
        </tr>
        
            @{

                ArrayList list = new ArrayList();
                var xlist = "";

                foreach (var item in Model.UserList)
                {
                    list.Add(@item.FullAddress);
                    xlist = xlist + @item.FullAddress + ",";
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.FullAddress)</td>
                        
                    </tr>
                }


                @Html.ActionLink("Search Cast Crew", "Index", "Home", new { area = "" }, new { @style = "display:none", @class = "navbar-brand myspecialdata", @mydata = xlist })

            }
            

        
    </table>


</div>
    

<script>
    $(document).ready(function () {
        console.log("document loaded");

        // Data set..
        var addData = $(".myspecialdata").attr("mydata");

        //alert(addData);
        var addresses1 = addData;
        console.log("Data addresses ", addresses1.length)

        var arrayed = addresses1.split(",");
        arrayed.pop();
        console.log("Data arred", arrayed.length)
        for (var i = 0; i < arrayed.length; i++) {
            console.log(i, arrayed[i]);
        }

        //<![CDATA[


        // delay between geocode requests - at the time of writing, 100 miliseconds seems to work well
        var delay = 100;
        // ====== Create map objects ======
        var infowindow = new google.maps.InfoWindow();
        var latlng = new google.maps.LatLng(42.877742, -97.380979);
        var mapOptions = {
            zoom: 8,
            center: latlng,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        }
        var geo = new google.maps.Geocoder();
        var map = new google.maps.Map(document.getElementById("map"), mapOptions);
        var bounds = new google.maps.LatLngBounds();

        var addresses = arrayed;
        //alert(addresses.length);
        // ======= Global variable to remind us what to do next
        var nextAddress = 0;

        function theNext() {
            //alert(addresses.length);
            if (nextAddress < addresses.length) {
                //alert(addresses[nextAddress]);
                setTimeout(getAddress( addresses[nextAddress] , theNext), delay);
                nextAddress++;
            } else {
                // We're done. Show map bounds
                map.fitBounds(bounds);
            }
        }

        // ======= Call that function for the first time =======
        theNext();
        // ====== Geocoding ======
        function getAddress(search, next) {
            //askfhj
            //alert("I am getting address!",search);
            geo.geocode({ address: search }, function (results, status) {
                // If that was successful
                if (status == google.maps.GeocoderStatus.OK) {
                    // Lets assume that the first marker is the one we want
                    var p = results[0].geometry.location;
                    var lat = p.lat();
                    var lng = p.lng();
                    // Output the data
                    var msg = 'address="' + search + '" lat=' + lat + ' lng=' + lng + '(delay=' + delay + 'ms)<br>';
                    //document.getElementById("messages").innerHTML += msg;
                    // Create a marker
                    createMarker(search, lat, lng);
                }
                    // ====== Decode the error status ======
                else {
                    // === if we were sending the requests to fast, try this one again and increase the delay
                    if (status == google.maps.GeocoderStatus.OVER_QUERY_LIMIT) {
                        nextAddress--;
                        delay++;
                    } else {
                        var reason = "Code " + status;
                        var msg = 'address="' + search + '" error=' + reason + '(delay=' + delay + 'ms)<br>';
                        //document.getElementById("messages").innerHTML += msg;
                    }
                }
                next();
            }
            );
        }

        // ======= Function to create a marker
        function createMarker(add, lat, lng) {
            var contentString = add;
            var marker = new google.maps.Marker({
                position: new google.maps.LatLng(lat, lng),
                map: map,
                zIndex: Math.round(latlng.lat() * -100000) << 5
            });

            google.maps.event.addListener(marker, 'click', function () {
                infowindow.setContent(contentString);
                infowindow.open(map, marker);
            });

            bounds.extend(marker.position);

        }

     
        // ======= Function to call the next Geocode operation when the reply comes back

    

        //]]>
        /////

    });

    $(window).load(function () {
        //console.log("window loaded");
    });
</script>





    

